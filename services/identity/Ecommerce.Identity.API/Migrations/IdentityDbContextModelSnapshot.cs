// <auto-generated />
using System;
using Ecommerce.Identity.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Identity.API.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.PermissionAggregate.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000001"),
                            Description = "用户管理页面",
                            DisplayName = "用户管理页面",
                            Enabled = true,
                            Name = "Page:User.View",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000004"),
                            Description = "订单管理页面",
                            DisplayName = "订单管理页面",
                            Enabled = true,
                            Name = "Page:Order.View",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000002"),
                            Description = "编辑用户",
                            DisplayName = "编辑用户",
                            Enabled = true,
                            Name = "Permission:User.Edit",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000003"),
                            Description = "删除用户",
                            DisplayName = "删除用户",
                            Enabled = true,
                            Name = "Permission:User.Delete",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aaaa1111-0000-0000-0000-000000000005"),
                            Description = "管理订单",
                            DisplayName = "管理订单",
                            Enabled = true,
                            Name = "Permission:Order.Manage",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "管理员",
                            Enabled = true,
                            IsSystemRole = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "卖家",
                            Enabled = true,
                            IsSystemRole = true,
                            Name = "Seller"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "买家",
                            Enabled = true,
                            IsSystemRole = true,
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "访客",
                            Enabled = true,
                            IsSystemRole = true,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.RoleAggregate.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333"),
                            PermissionId = new Guid("aaaa1111-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.RoleAggregate.RolePermission", b =>
                {
                    b.HasOne("Ecommerce.Identity.API.Domain.Aggregates.RoleAggregate.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.OwnsOne("Ecommerce.Identity.API.Domain.ValueObjects.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AvatarUrl")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Profile_AvatarUrl");

                            b1.Property<DateTime>("Birthday")
                                .HasColumnType("datetime2")
                                .HasColumnName("Profile_Birthday");

                            b1.Property<int>("Gender")
                                .HasColumnType("int")
                                .HasColumnName("Profile_Gender");

                            b1.Property<string>("NickName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Profile_NickName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.UserAddress", b =>
                {
                    b.HasOne("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ecommerce.Identity.API.Domain.ValueObjects.Region", "Region", b1 =>
                        {
                            b1.Property<Guid>("UserAddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("District");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Province");

                            b1.HasKey("UserAddressId");

                            b1.ToTable("UserAddresses");

                            b1.WithOwner()
                                .HasForeignKey("UserAddressId");
                        });

                    b.Navigation("Region")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.UserRole", b =>
                {
                    b.HasOne("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Ecommerce.Identity.API.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
